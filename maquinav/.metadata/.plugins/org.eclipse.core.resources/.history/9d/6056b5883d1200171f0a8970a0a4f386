/*
 * lvm-v19.c
 *
 *  Created on: 26 de mar de 2017
 *      Author: leoci
 */

#include <stdio.h>
#include <stdlib.h>

int retornaTamStr(unsigned char *buffer, int inicio);
cpyStrControl(unsigned char *strControl, unsigned char *buffer, int inicio);

int main(int argc, char *argv[]) {
	FILE *file;
	size_t size;
	unsigned char *buffer;
	unsigned char *strControl;
	file = fopen(argv[1], "rb");

	fseek(file, 0, SEEK_END);
	size = ftell(file);
	fseek(file, 0, SEEK_SET);
	buffer = (unsigned char *) malloc(size);

	if (file == NULL) {
		printf("Error: There was an Error reading the file %s \n", argv[1]);
		exit(1);
	} else if (fread(buffer, sizeof *buffer, size, file) != size) {
		printf("Error: There was an Error reading the file %s - %d\n", argv[1],
				size);
		exit(1);
	} else {
		int indice = 0;

		//Palavra chava "baba babe" em hex.
		if (((int) (buffer[indice++]) == 186)
				&& ((int) (buffer[indice++]) == 186)
				&& ((int) (buffer[indice++]) == 186)
				&& ((int) (buffer[indice++]) == 190)) {

			int tamInstrucoes = retornaInt(buffer, indice);
			indice += 4;

			int tamDados = retornaInt(buffer, indice);
			indice += 4;
			tamDados += 0;

			int inicioInstrucoes = indice;

			int inicioDados = inicioInstrucoes + tamInstrucoes;



			while (indice < size) {
				//printf("passei indice = %d\n", indice);

				if (buffer[indice] == 0x01) {
					//mov-strControl-indiceMem
					indice++;
					if(buffer[indice] == 0x01){
						indice++;
						int tamStr = retornaTamStr(buffer, indice);
						strControl = (unsigned char *) malloc(tamStr);
						cpyStrControl(strControl, buffer, indice);
						indice+=4;
					}

				} else if ((int) (buffer[indice++]) == 255) {
					printf("\nEstado final da Memoria.\n");
					imprimeMemoria(inicioDados, size - 1, buffer);
					printf("\n");
					exit(0);
				}
			}
		} else {
			printf(
					"Codigo da Leoci Virtual Machine nao encontrado no arquivo %s!\n",
					argv[1]);
			exit(0);
		}

	}

	return 0;
}

int retornaTamStr(unsigned char *buffer, int inicio){
	int contStr = 0;
	for(int i=inicio; buffer[i]!='\0'; i++){
		contStr++;
	}
	return contStr;
}

cpyStrControl(unsigned char *strControl, unsigned char *buffer, int inicio);
